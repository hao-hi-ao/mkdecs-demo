{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"About me hao-hi-ao","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#me","text":"hao-hi-ao","title":"me"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/","text":"\u51fd\u6570\u53c2\u8003 \u7b2c1\u7ae0 \u73a9\u5177\u603b\u52a8\u5458 car \u83b7\u53d6l\uff08list\uff0c\u975enull list\uff09\u7684\u7b2c1\u4e2aS-expression ; (car list) (car l) cdr \u83b7\u53d6l\uff08list\uff0c\u975enull list\uff09\u6263\u9664 (car list) \u7684\u90e8\u5206\uff0c\u4e5f\u662f\u4e00\u4e2alist ; (cdr list) (cdr l) cons \u6dfb\u52a0\u4e00\u4e2ax\uff08S-expression\uff09\u5230\u4e00\u4e2al\uff08list\uff09\u7684\u5f00\u5934\u5904\uff0c\u5e76\u8fd4\u56de\u65b0\u7684l ; (cons S-expression list) (cons x l) null? \u5224\u65adl\uff08list\uff09\u662f\u5426\u4e3anull list ; (null? list) (null? l) atom? \u5224\u65adx\uff08S-expression\uff09\u662f\u5426\u4e3aatom (define atom? (lambda (x) (and (not (pair? x)) (not (null? x))))) ; (atom? S-expression) (atom x) eq? \u5224\u65ad\u4e24\u4e2a\u539f\u5b50\uff08\u975e\u6570\u5b57\uff09a1\u548ca2\u662f\u5426\u76f8\u540c ; (eq? atom atom) (eq? a1 a2) \u7b2c2\u7ae0 \u5904\u7406\uff0c\u5904\u7406\uff0c\u53cd\u590d\u5904\u7406\u2026\u2026 lat? \u5224\u65adl\uff08list\uff09\u662f\u5426\u4e3alist of atom (define lat? (lambda (l) (cond ((null? l) #t) (else (and (atom? (car l)) (lat? (cdr l))))))) ; (lat? list) (lat? l) member? \u5224\u65ada\uff08atom\uff09\u662f\u5426\u5728lat\uff08list of atom\uff09\u4e2d (define member? (lambda (a lat) (cond ((null? lat) #f) (else (or (eq? a (car lat)) (member? a (cdr lat))))))) ; (member? atom list-of-atom) (member? a lat) \u7b2c3\u7ae0 \u7528cons\u6784\u7b51\u6062\u5b8f rember \u5220\u9664lat\uff08list of atom\uff09\u4e2d\u7684\u7b2c\u4e00\u4e2aa\uff08atom\uff09\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat\uff1b\u82e5lat\u4e2d\u6ca1\u6709a\uff0c\u5219lat\u4fdd\u6301\u539f\u6001\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat (define rember (lambda (a lat) (cond ((null? lat) `()) ((eq? a (car lat)) (cdr lat)) (else (cons (car lat) (rember a (cdr lat))))))) ; (rember atom list-of-atom) (rember a lat) firsts \u83b7\u53d6l\uff08list\uff0c\u8fd9\u4e2alist\u8981\u4e48\u662fnull list\uff0c\u8981\u4e48\u53ea\u5305\u542b\u975enull list\uff09\u4e2d\u6bcf\u4e2a\u5185\u90e8list\u7684\u7b2c1\u4e2aS-expression\uff08\u5373 (car list) \uff09\u6240\u6784\u6210\u7684list (define firsts (lambda (l) (cond ((null? l) `()) (else (cons (car (car l)) (firsts (cdr l))))))) ; (firsts list) (firsts l) insertR \u5728lat\uff08list of atom\uff09\u7684\u7b2c1\u4e2aold\uff08atom\uff09\u7684\u53f3\u8fb9\u63d2\u5165new\uff08atom\uff09\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat\uff1b\u82e5lat\u4e2d\u6ca1\u6709old\uff0c\u5219lat\u4fdd\u6301\u539f\u6001\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat (define insertR (lambda (new old lat) (cond ((null? lat) `()) ((eq? (car lat) old) (cons old (cons new (cdr lat)))) (else (cons (car lat) (insertR new old (cdr lat))))))) ; (insertR atom atom list-of-atom) (insertR new old lat) insertL \u5728lat\uff08list of atom\uff09\u7684\u7b2c1\u4e2aold\uff08atom\uff09\u7684\u5de6\u8fb9\u63d2\u5165new\uff08atom\uff09\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat\uff1b\u82e5lat\u4e2d\u6ca1\u6709old\uff0c\u5219lat\u4fdd\u6301\u539f\u6001\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat (define insertL (lambda (new old lat) (cond ((null? lat) `()) ((eq? (car lat) old) (cons new lat)) (else (cons (car lat) (insertL new old (cdr lat))))))) ; (insertL atom atom list-of-atom) (insertL new old lat) subst \u7528new\uff08atom\uff09\u4ee3\u66fflat\uff08list of atom\uff09\u4e2d\u7684\u9996\u4e2aold\uff08atom\uff09\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat\uff1b\u82e5lat\u4e2d\u6ca1\u6709old\uff0c\u5219lat\u4fdd\u6301\u539f\u6001\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat (define subst (lambda (new old lat) (cond ((null? lat) `()) ((eq? (car lat) old) (cons new (cdr lat))) (else (cons (car lat) (subst new old (cdr lat))))))) ; (subst atom atom list-of-atom) (subst new old lat) subst2 \u7528new\uff08atom\uff09\u4ee3\u66fflat\u4e2d\u7684\u9996\u4e2ao1\u6216\u9996\u4e2ao2\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat\uff1b\u82e5lat\u4e2d\u6ca1\u6709o1\u548co2\uff0c\u5219lat\u4fdd\u6301\u539f\u6001\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat (define subst2 (lambda (new o1 o2 lat) (cond ((null? lat) `()) ((or (eq? (car lat) o1) (eq? (car lat) o2)) (cons new (cdr lat))) (else (cons (car lat) (subst2 new o1 o2 (cdr lat))))))) ; (subst2 atom atom atom list-of-atom) (subst2 new o1 o2 lat) multirember \u8fd4\u56de\u79fb\u9664\u4e86\u6240\u6709a\uff08atom\uff09\u7684lat\uff08list of atom\uff09\uff1b\u82e5lat\u4e2d\u6ca1\u6709a\uff0c\u5219lat\u4fdd\u6301\u539f\u6001\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat (define multirember (lambda (a lat) (cond ((null? lat) `()) ((eq? (car lat) a) (multirember a (cdr lat))) (else (cons (car lat) (multirember a (cdr lat))))))) ; (multirember atom list-of-atom) (multirember a lat) multiinsertR \u5728lat\uff08list of atom\uff09\u4e2d\u6240\u6709\u7684old\uff08atom\uff09\u7684\u53f3\u8fb9\u90fd\u63d2\u5165new\uff08atom\uff09\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat\uff1b\u82e5lat\u4e2d\u6ca1\u6709old\uff0c\u5219lat\u4fdd\u6301\u539f\u6001\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat (define multiinsertR (lambda (new old lat) (cond ((null? lat) `()) ((eq? (car lat) old) (cons old (cons new (multiinsertR (cdr lat))))) (else (cons (car lat) (multiinsertR new old (cdr lat))))))) ; (multiinsertR atom atom list-of-atom) (multiinsertR new old lat) multiinsertL \u5728lat\uff08list of atom\uff09\u4e2d\u6240\u6709\u7684old\uff08atom\uff09\u7684\u5de6\u8fb9\u90fd\u63d2\u5165new\uff08atom\uff09\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat\uff1b\u82e5lat\u4e2d\u6ca1\u6709old\uff0c\u5219lat\u4fdd\u6301\u539f\u6001\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat (define multiinsertL (lambda (new old lat) (cond ((null? lat) `()) ((eq? (car lat) old) (cons new (cons old (multiinsertL new old (cdr lat))))) (else (cons (car lat) (multiinsertL new old (cdr lat))))))) ; (multiinsertL atom atom list-of-atom) (multiinsertL new old lat) multisubst \u7528new\uff08atom\uff09\u4ee3\u66fflat\uff08list of atom\uff09\u4e2d\u7684\u6240\u6709old\uff08atom\uff09\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat\uff1b\u82e5lat\u4e2d\u6ca1\u6709old\uff0c\u5219lat\u4fdd\u6301\u539f\u6001\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat (define multisubst (lambda (new old lat) (cond ((null? lat) `()) ((eq? (car lat) old) (cons new (multisubst new old (cdr lat)))) (else (cons (car lat) (multisubst new old (cdr lat))))))) ; (multisubst atom atom list-of-atom) (multisubst new old lat) \u7b2c4\u7ae0 \u6570\u5b57\u6e38\u620f add1 n\u52a01 (define add1 (lambda (n) (+ n 1))) ; (add1 natural-number) (add1 n) sub1 n\u51cf1 (define sub1 (lambda (n) (- n 1))) ; (sub1 natural-number) (sub1 n) zero? \u5224\u65adn\u662f\u5426\u4e3a0 ; (zero? tatural-number) (zero? n) o+ n\u52a0m (define o+ (lambda (n m) (cond ((zero? m) n) (else (add1 (o+ n (sub1 m))))))) ; (o+ natural-number natural-number) (o+ n m) o- n\u51cfm (define o- (lambda (n m) (cond ((zero? m) n) (else (sub1 (o- n (sub1 m))))))) ; (o- natural-number natural-number) (o- n m) addtup ; \u8ba1\u7b97tup\u7684\u603b\u548c\uff0c\u5f53tup\u4e3anull list\u65f6\uff0c\u603b\u548c\u4e3a0 ; (addtup tup) ; (addtup tup) (define addtup (lambda (tup) (cond ((null? tup) 0) (else (o+ (car tup) (addtup (cdr tup))))))) o* ; n\u4e58m ; (o* n m) ; (o* natural-number natural-number) ; (o* 1 2) -> 2 (define o* (lambda (n m) (cond ((zero? m) 0) (else (o+ n (o* n (sub1 m))))))) tup+ ; tup1\u5185\u7684\u4e2a\u4e2anatural-number\u4e0etup2\u5bf9\u5e94\u4f4d\u7f6e\u7684natural-number\u76f8\u52a0\uff1b\u82e5tup1\u4e0etup2\u957f\u5ea6\u4e0d\u540c\uff0c\u5219\u8f83\u957f\u7684tup\u7684\u5269\u4f59\u90e8\u5206\u4fdd\u6301\u539f\u6001 ; C\uff1a(tup+ tup1 tup2) ; T\uff1a(tup+ tup tup) ; E\uff1a(tup+ `(1 2 3) `(1 2 3)) -> `(2 4 6) ; \uff1a(tup+ `(2 1 5 4) `(1 2 3)) -> `(3 3 8 4) (define tup+ (lambda (tup1 tup2) (cond ((null? tup1) tup2) ((null? tup2) tup1) (else (cons (o+ (car tup1) (car tup2)) (tup+ (cdr tup1) (cdr tup2))))))) o> ; \u5224\u65adn\u662f\u5426\u5927\u4e8em ; C\uff1a(o> n m) ; T\uff1a(o> n[natural-number] m[natural-number]) -> boolean ; E\uff1a(o> 1 2) -> #f ; \uff1a(o> 4 2) -> #t (define o> (lambda (n m) (cond ((zero? n) #f) ((zero? m) #t) (else (o> (sub1 n) (sub1 m)))))) o< ; \u5224\u65adn\u662f\u5426\u5c0f\u4e8em ; C\uff1a(o< n m) ; T\uff1a(o< n[natural-number] m[natural-number]) -> boolean ; E\uff1a(o< 1 2) -> #t ; \uff1a(o< 4 2) -> #f (define o< (lambda (n m) (cond ((zero? m) #f) ((zero? n) #t) (else (o< (sub1 n) (sub1 m)))))) o= ; \u5224\u65adn\u662f\u5426\u7b49\u4e8em ; C\uff1a(o= n m) ; T\uff1a(o= n[natural-number] m[natural-number]) -> boolean ; E\uff1a(o= 2 2) -> #t ; \uff1a(o= 4 2) -> #f (define o= (lambda (n m) (cond ((or (o> n m) (o< n m)) #f) (else #t)))) \u2191 ; \u5224\u65adn\u662f\u5426\u7b49\u4e8em ; C\uff1a(o= n m) ; T\uff1a(o= n[natural-number] m[natural-number]) -> boolean ; E\uff1a(o= 2 2) -> #t ; \uff1a(o= 4 2) -> #f (define o= (lambda (n m) (cond ((or (o> n m) (o< n m)) #f) (else #t)))) o/ ; C\uff1a(o/ n m) ; T\uff1a(o/ n[natural-number] m[natural-number]) -> natural-number ; I\uff1a\u6c42n\u9664\u4ee5m\u7684\u5546 ; E\uff1a(o/ 4 2) -> 2 ; \uff1a(o/ 5 2) -> 2 (define o/ (lambda (n m) (cond ((o< n m) 0) (else (add1 (o/ (o- n m) m))))))","title":"function"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#_1","text":"","title":"\u51fd\u6570\u53c2\u8003"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#1","text":"","title":"\u7b2c1\u7ae0 \u73a9\u5177\u603b\u52a8\u5458"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#car","text":"\u83b7\u53d6l\uff08list\uff0c\u975enull list\uff09\u7684\u7b2c1\u4e2aS-expression ; (car list) (car l)","title":"car"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#cdr","text":"\u83b7\u53d6l\uff08list\uff0c\u975enull list\uff09\u6263\u9664 (car list) \u7684\u90e8\u5206\uff0c\u4e5f\u662f\u4e00\u4e2alist ; (cdr list) (cdr l)","title":"cdr"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#cons","text":"\u6dfb\u52a0\u4e00\u4e2ax\uff08S-expression\uff09\u5230\u4e00\u4e2al\uff08list\uff09\u7684\u5f00\u5934\u5904\uff0c\u5e76\u8fd4\u56de\u65b0\u7684l ; (cons S-expression list) (cons x l)","title":"cons"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#null","text":"\u5224\u65adl\uff08list\uff09\u662f\u5426\u4e3anull list ; (null? list) (null? l)","title":"null?"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#atom","text":"\u5224\u65adx\uff08S-expression\uff09\u662f\u5426\u4e3aatom (define atom? (lambda (x) (and (not (pair? x)) (not (null? x))))) ; (atom? S-expression) (atom x)","title":"atom?"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#eq","text":"\u5224\u65ad\u4e24\u4e2a\u539f\u5b50\uff08\u975e\u6570\u5b57\uff09a1\u548ca2\u662f\u5426\u76f8\u540c ; (eq? atom atom) (eq? a1 a2)","title":"eq?"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#2","text":"","title":"\u7b2c2\u7ae0 \u5904\u7406\uff0c\u5904\u7406\uff0c\u53cd\u590d\u5904\u7406\u2026\u2026"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#lat","text":"\u5224\u65adl\uff08list\uff09\u662f\u5426\u4e3alist of atom (define lat? (lambda (l) (cond ((null? l) #t) (else (and (atom? (car l)) (lat? (cdr l))))))) ; (lat? list) (lat? l)","title":"lat?"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#member","text":"\u5224\u65ada\uff08atom\uff09\u662f\u5426\u5728lat\uff08list of atom\uff09\u4e2d (define member? (lambda (a lat) (cond ((null? lat) #f) (else (or (eq? a (car lat)) (member? a (cdr lat))))))) ; (member? atom list-of-atom) (member? a lat)","title":"member?"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#3-cons","text":"","title":"\u7b2c3\u7ae0 \u7528cons\u6784\u7b51\u6062\u5b8f"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#rember","text":"\u5220\u9664lat\uff08list of atom\uff09\u4e2d\u7684\u7b2c\u4e00\u4e2aa\uff08atom\uff09\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat\uff1b\u82e5lat\u4e2d\u6ca1\u6709a\uff0c\u5219lat\u4fdd\u6301\u539f\u6001\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat (define rember (lambda (a lat) (cond ((null? lat) `()) ((eq? a (car lat)) (cdr lat)) (else (cons (car lat) (rember a (cdr lat))))))) ; (rember atom list-of-atom) (rember a lat)","title":"rember"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#firsts","text":"\u83b7\u53d6l\uff08list\uff0c\u8fd9\u4e2alist\u8981\u4e48\u662fnull list\uff0c\u8981\u4e48\u53ea\u5305\u542b\u975enull list\uff09\u4e2d\u6bcf\u4e2a\u5185\u90e8list\u7684\u7b2c1\u4e2aS-expression\uff08\u5373 (car list) \uff09\u6240\u6784\u6210\u7684list (define firsts (lambda (l) (cond ((null? l) `()) (else (cons (car (car l)) (firsts (cdr l))))))) ; (firsts list) (firsts l)","title":"firsts"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#insertr","text":"\u5728lat\uff08list of atom\uff09\u7684\u7b2c1\u4e2aold\uff08atom\uff09\u7684\u53f3\u8fb9\u63d2\u5165new\uff08atom\uff09\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat\uff1b\u82e5lat\u4e2d\u6ca1\u6709old\uff0c\u5219lat\u4fdd\u6301\u539f\u6001\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat (define insertR (lambda (new old lat) (cond ((null? lat) `()) ((eq? (car lat) old) (cons old (cons new (cdr lat)))) (else (cons (car lat) (insertR new old (cdr lat))))))) ; (insertR atom atom list-of-atom) (insertR new old lat)","title":"insertR"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#insertl","text":"\u5728lat\uff08list of atom\uff09\u7684\u7b2c1\u4e2aold\uff08atom\uff09\u7684\u5de6\u8fb9\u63d2\u5165new\uff08atom\uff09\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat\uff1b\u82e5lat\u4e2d\u6ca1\u6709old\uff0c\u5219lat\u4fdd\u6301\u539f\u6001\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat (define insertL (lambda (new old lat) (cond ((null? lat) `()) ((eq? (car lat) old) (cons new lat)) (else (cons (car lat) (insertL new old (cdr lat))))))) ; (insertL atom atom list-of-atom) (insertL new old lat)","title":"insertL"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#subst","text":"\u7528new\uff08atom\uff09\u4ee3\u66fflat\uff08list of atom\uff09\u4e2d\u7684\u9996\u4e2aold\uff08atom\uff09\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat\uff1b\u82e5lat\u4e2d\u6ca1\u6709old\uff0c\u5219lat\u4fdd\u6301\u539f\u6001\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat (define subst (lambda (new old lat) (cond ((null? lat) `()) ((eq? (car lat) old) (cons new (cdr lat))) (else (cons (car lat) (subst new old (cdr lat))))))) ; (subst atom atom list-of-atom) (subst new old lat)","title":"subst"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#subst2","text":"\u7528new\uff08atom\uff09\u4ee3\u66fflat\u4e2d\u7684\u9996\u4e2ao1\u6216\u9996\u4e2ao2\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat\uff1b\u82e5lat\u4e2d\u6ca1\u6709o1\u548co2\uff0c\u5219lat\u4fdd\u6301\u539f\u6001\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat (define subst2 (lambda (new o1 o2 lat) (cond ((null? lat) `()) ((or (eq? (car lat) o1) (eq? (car lat) o2)) (cons new (cdr lat))) (else (cons (car lat) (subst2 new o1 o2 (cdr lat))))))) ; (subst2 atom atom atom list-of-atom) (subst2 new o1 o2 lat)","title":"subst2"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#multirember","text":"\u8fd4\u56de\u79fb\u9664\u4e86\u6240\u6709a\uff08atom\uff09\u7684lat\uff08list of atom\uff09\uff1b\u82e5lat\u4e2d\u6ca1\u6709a\uff0c\u5219lat\u4fdd\u6301\u539f\u6001\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat (define multirember (lambda (a lat) (cond ((null? lat) `()) ((eq? (car lat) a) (multirember a (cdr lat))) (else (cons (car lat) (multirember a (cdr lat))))))) ; (multirember atom list-of-atom) (multirember a lat)","title":"multirember"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#multiinsertr","text":"\u5728lat\uff08list of atom\uff09\u4e2d\u6240\u6709\u7684old\uff08atom\uff09\u7684\u53f3\u8fb9\u90fd\u63d2\u5165new\uff08atom\uff09\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat\uff1b\u82e5lat\u4e2d\u6ca1\u6709old\uff0c\u5219lat\u4fdd\u6301\u539f\u6001\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat (define multiinsertR (lambda (new old lat) (cond ((null? lat) `()) ((eq? (car lat) old) (cons old (cons new (multiinsertR (cdr lat))))) (else (cons (car lat) (multiinsertR new old (cdr lat))))))) ; (multiinsertR atom atom list-of-atom) (multiinsertR new old lat)","title":"multiinsertR"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#multiinsertl","text":"\u5728lat\uff08list of atom\uff09\u4e2d\u6240\u6709\u7684old\uff08atom\uff09\u7684\u5de6\u8fb9\u90fd\u63d2\u5165new\uff08atom\uff09\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat\uff1b\u82e5lat\u4e2d\u6ca1\u6709old\uff0c\u5219lat\u4fdd\u6301\u539f\u6001\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat (define multiinsertL (lambda (new old lat) (cond ((null? lat) `()) ((eq? (car lat) old) (cons new (cons old (multiinsertL new old (cdr lat))))) (else (cons (car lat) (multiinsertL new old (cdr lat))))))) ; (multiinsertL atom atom list-of-atom) (multiinsertL new old lat)","title":"multiinsertL"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#multisubst","text":"\u7528new\uff08atom\uff09\u4ee3\u66fflat\uff08list of atom\uff09\u4e2d\u7684\u6240\u6709old\uff08atom\uff09\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat\uff1b\u82e5lat\u4e2d\u6ca1\u6709old\uff0c\u5219lat\u4fdd\u6301\u539f\u6001\uff0c\u5e76\u8fd4\u56de\u65b0\u7684lat (define multisubst (lambda (new old lat) (cond ((null? lat) `()) ((eq? (car lat) old) (cons new (multisubst new old (cdr lat)))) (else (cons (car lat) (multisubst new old (cdr lat))))))) ; (multisubst atom atom list-of-atom) (multisubst new old lat)","title":"multisubst"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#4","text":"","title":"\u7b2c4\u7ae0 \u6570\u5b57\u6e38\u620f"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#add1","text":"n\u52a01 (define add1 (lambda (n) (+ n 1))) ; (add1 natural-number) (add1 n)","title":"add1"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#sub1","text":"n\u51cf1 (define sub1 (lambda (n) (- n 1))) ; (sub1 natural-number) (sub1 n)","title":"sub1"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#zero","text":"\u5224\u65adn\u662f\u5426\u4e3a0 ; (zero? tatural-number) (zero? n)","title":"zero?"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#o","text":"n\u52a0m (define o+ (lambda (n m) (cond ((zero? m) n) (else (add1 (o+ n (sub1 m))))))) ; (o+ natural-number natural-number) (o+ n m)","title":"o+"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#o-","text":"n\u51cfm (define o- (lambda (n m) (cond ((zero? m) n) (else (sub1 (o- n (sub1 m))))))) ; (o- natural-number natural-number) (o- n m)","title":"o-"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#addtup","text":"; \u8ba1\u7b97tup\u7684\u603b\u548c\uff0c\u5f53tup\u4e3anull list\u65f6\uff0c\u603b\u548c\u4e3a0 ; (addtup tup) ; (addtup tup) (define addtup (lambda (tup) (cond ((null? tup) 0) (else (o+ (car tup) (addtup (cdr tup)))))))","title":"addtup"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#o_1","text":"; n\u4e58m ; (o* n m) ; (o* natural-number natural-number) ; (o* 1 2) -> 2 (define o* (lambda (n m) (cond ((zero? m) 0) (else (o+ n (o* n (sub1 m)))))))","title":"o*"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#tup","text":"; tup1\u5185\u7684\u4e2a\u4e2anatural-number\u4e0etup2\u5bf9\u5e94\u4f4d\u7f6e\u7684natural-number\u76f8\u52a0\uff1b\u82e5tup1\u4e0etup2\u957f\u5ea6\u4e0d\u540c\uff0c\u5219\u8f83\u957f\u7684tup\u7684\u5269\u4f59\u90e8\u5206\u4fdd\u6301\u539f\u6001 ; C\uff1a(tup+ tup1 tup2) ; T\uff1a(tup+ tup tup) ; E\uff1a(tup+ `(1 2 3) `(1 2 3)) -> `(2 4 6) ; \uff1a(tup+ `(2 1 5 4) `(1 2 3)) -> `(3 3 8 4) (define tup+ (lambda (tup1 tup2) (cond ((null? tup1) tup2) ((null? tup2) tup1) (else (cons (o+ (car tup1) (car tup2)) (tup+ (cdr tup1) (cdr tup2)))))))","title":"tup+"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#o_2","text":"; \u5224\u65adn\u662f\u5426\u5927\u4e8em ; C\uff1a(o> n m) ; T\uff1a(o> n[natural-number] m[natural-number]) -> boolean ; E\uff1a(o> 1 2) -> #f ; \uff1a(o> 4 2) -> #t (define o> (lambda (n m) (cond ((zero? n) #f) ((zero? m) #t) (else (o> (sub1 n) (sub1 m))))))","title":"o&gt;"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#o_3","text":"; \u5224\u65adn\u662f\u5426\u5c0f\u4e8em ; C\uff1a(o< n m) ; T\uff1a(o< n[natural-number] m[natural-number]) -> boolean ; E\uff1a(o< 1 2) -> #t ; \uff1a(o< 4 2) -> #f (define o< (lambda (n m) (cond ((zero? m) #f) ((zero? n) #t) (else (o< (sub1 n) (sub1 m))))))","title":"o&lt;"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#o_4","text":"; \u5224\u65adn\u662f\u5426\u7b49\u4e8em ; C\uff1a(o= n m) ; T\uff1a(o= n[natural-number] m[natural-number]) -> boolean ; E\uff1a(o= 2 2) -> #t ; \uff1a(o= 4 2) -> #f (define o= (lambda (n m) (cond ((or (o> n m) (o< n m)) #f) (else #t))))","title":"o="},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#_2","text":"; \u5224\u65adn\u662f\u5426\u7b49\u4e8em ; C\uff1a(o= n m) ; T\uff1a(o= n[natural-number] m[natural-number]) -> boolean ; E\uff1a(o= 2 2) -> #t ; \uff1a(o= 4 2) -> #f (define o= (lambda (n m) (cond ((or (o> n m) (o< n m)) #f) (else #t))))","title":"\u2191"},{"location":"api/%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/#o_5","text":"; C\uff1a(o/ n m) ; T\uff1a(o/ n[natural-number] m[natural-number]) -> natural-number ; I\uff1a\u6c42n\u9664\u4ee5m\u7684\u5546 ; E\uff1a(o/ 4 2) -> 2 ; \uff1a(o/ 5 2) -> 2 (define o/ (lambda (n m) (cond ((o< n m) 0) (else (add1 (o/ (o- n m) m))))))","title":"o/"},{"location":"api/%E6%A6%82%E5%BF%B5%E5%8F%82%E8%80%83/","text":"\u6982\u5ff5\u53c2\u8003 \u7b2c1\u7ae0 \u73a9\u5177\u603b\u52a8\u5458 atom \u4e00\u4e2a\u5b57\u7b26\u4e32\uff08\u4e0d\u80fd\u4ee5'('\u548c')'\u5de6\u53f3\u5706\u62ec\u53f7\u5f00\u5934\uff09\u6216\u4e00\u4e2a\u6570\u5b57 `atom `turkey `1492 `u `*abc$ 10 12 list \u7528\u62ec\u53f7\u62ec\u8d77\u6765\u7684atom\u96c6\u5408\u6216list\u96c6\u5408\u6216\u4e24\u8005\u517c\u6709 `(atom) `(atom turkey or) `((atom turkey) or) null list/empty list \u62ec\u53f7\u5185\u6ca1\u6709\u5143\u7d20 `() S-expression atom\u548clist\u90fd\u662fS-expression `xyz `(x y z) `((x y) z) \u7b2c2\u7ae0 \u5904\u7406\uff0c\u5904\u7406\uff0c\u53cd\u590d\u5904\u7406\u2026\u2026 lat\uff08list of atom\uff09 list\u4e2d\u7684\u6bcf\u4e2aS-expression\u90fd\u662f\u539f\u5b50\uff0clat\u5305\u62ecnull list `() `(1 2 3) `(x y z) `(1 x 2 y 3 z) \u7b2c3\u7ae0 \u7528cons\u6784\u7b51\u6062\u5b8f \u7b2c4\u7ae0 \u6570\u5b57\u6e38\u620f number \u6570\u5b57 14 -3 3.14159 natural number \u81ea\u7136\u6570\uff080\u548c\u6b63\u6574\u6570\uff09 0 67 5 tup\uff08tuple\uff09 \u53ea\u6709natural-number\u7684lat\u3002 `() `(1) `(0 2 3)","title":"concept"},{"location":"api/%E6%A6%82%E5%BF%B5%E5%8F%82%E8%80%83/#_1","text":"","title":"\u6982\u5ff5\u53c2\u8003"},{"location":"api/%E6%A6%82%E5%BF%B5%E5%8F%82%E8%80%83/#1","text":"","title":"\u7b2c1\u7ae0 \u73a9\u5177\u603b\u52a8\u5458"},{"location":"api/%E6%A6%82%E5%BF%B5%E5%8F%82%E8%80%83/#atom","text":"\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08\u4e0d\u80fd\u4ee5'('\u548c')'\u5de6\u53f3\u5706\u62ec\u53f7\u5f00\u5934\uff09\u6216\u4e00\u4e2a\u6570\u5b57 `atom `turkey `1492 `u `*abc$ 10 12","title":"atom"},{"location":"api/%E6%A6%82%E5%BF%B5%E5%8F%82%E8%80%83/#list","text":"\u7528\u62ec\u53f7\u62ec\u8d77\u6765\u7684atom\u96c6\u5408\u6216list\u96c6\u5408\u6216\u4e24\u8005\u517c\u6709 `(atom) `(atom turkey or) `((atom turkey) or)","title":"list"},{"location":"api/%E6%A6%82%E5%BF%B5%E5%8F%82%E8%80%83/#null-listempty-list","text":"\u62ec\u53f7\u5185\u6ca1\u6709\u5143\u7d20 `()","title":"null list/empty list"},{"location":"api/%E6%A6%82%E5%BF%B5%E5%8F%82%E8%80%83/#s-expression","text":"atom\u548clist\u90fd\u662fS-expression `xyz `(x y z) `((x y) z)","title":"S-expression"},{"location":"api/%E6%A6%82%E5%BF%B5%E5%8F%82%E8%80%83/#2","text":"","title":"\u7b2c2\u7ae0 \u5904\u7406\uff0c\u5904\u7406\uff0c\u53cd\u590d\u5904\u7406\u2026\u2026"},{"location":"api/%E6%A6%82%E5%BF%B5%E5%8F%82%E8%80%83/#latlist-of-atom","text":"list\u4e2d\u7684\u6bcf\u4e2aS-expression\u90fd\u662f\u539f\u5b50\uff0clat\u5305\u62ecnull list `() `(1 2 3) `(x y z) `(1 x 2 y 3 z)","title":"lat\uff08list of atom\uff09"},{"location":"api/%E6%A6%82%E5%BF%B5%E5%8F%82%E8%80%83/#3-cons","text":"","title":"\u7b2c3\u7ae0 \u7528cons\u6784\u7b51\u6062\u5b8f"},{"location":"api/%E6%A6%82%E5%BF%B5%E5%8F%82%E8%80%83/#4","text":"","title":"\u7b2c4\u7ae0 \u6570\u5b57\u6e38\u620f"},{"location":"api/%E6%A6%82%E5%BF%B5%E5%8F%82%E8%80%83/#number","text":"\u6570\u5b57 14 -3 3.14159","title":"number"},{"location":"api/%E6%A6%82%E5%BF%B5%E5%8F%82%E8%80%83/#natural-number","text":"\u81ea\u7136\u6570\uff080\u548c\u6b63\u6574\u6570\uff09 0 67 5","title":"natural number"},{"location":"api/%E6%A6%82%E5%BF%B5%E5%8F%82%E8%80%83/#tuptuple","text":"\u53ea\u6709natural-number\u7684lat\u3002 `() `(1) `(0 2 3)","title":"tup\uff08tuple\uff09"}]}